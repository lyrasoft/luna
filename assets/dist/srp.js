System.register(["@main"],(function(e,t){"use strict";var i,s,r,n;t&&t.id;function a(e){return BigInt(`0x${e}`)}return{setters:[function(e){}],execute:function(){i={identitySelector:"[data-input-identity]",passwordSelector:"[data-input-password]",prime:void 0,generator:void 0,key:void 0,size:256,hasher:"sha256"},s=u.$http,r=class{constructor(e,t={}){Object.defineProperty(this,"el",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"identityInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"passwordInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"submitting",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"disabledInputs",{enumerable:!0,configurable:!0,writable:!0,value:[]}),this.options=Object.assign({},i,t),this.identityInput=this.el.querySelector(this.options.identitySelector),this.passwordInput=this.el.querySelector(this.options.passwordSelector),this.init()}init(){if(!this.identityInput||!this.passwordInput)throw new Error("Identity or password input not found.");this.el.addEventListener("submit",(async e=>{if(!this.submitting)return e.stopPropagation(),e.preventDefault(),e.stopImmediatePropagation(),await this.register(),this.disablePasswords(),this.submitting=!0,void this.el.requestSubmit()})),this.el.addEventListener("invalid",(()=>{this.release()}),!0)}release(){this.submitting=!1;for(const e of this.disabledInputs)e.disabled=!1}getPasswordInputs(){return[this.passwordInput,...this.el.querySelectorAll("[data-srp-override]")]}disablePasswords(){this.disabledInputs=[];for(const e of this.getPasswordInputs())e&&e.value&&!e.disabled&&(e.disabled=!0,this.disabledInputs.push(e),setTimeout((()=>{e.disabled=!1}),1e3))}createClient(){const e=SRPClient.create(this.options.prime,this.options.generator,this.options.key);return e.setSize(this.options.size),e.setHasher(this.options?.hasher),e}async register(){const e=this.createClient(),t=this.identityInput?.value,i=this.passwordInput?.value;if(!t||!i)return this.getHiddenInput("srp[salt]").value="",void(this.getHiddenInput("srp[verifier]").value="");let{salt:s,verifier:r}=await e.register(t,i);this.getHiddenInput("srp[salt]").value=s.toString(16);this.getHiddenInput("srp[verifier]").value=r.toString(16)}getHiddenInput(e){return this.el.querySelector(`[name="${e}"]`)||this.createHiddenInput(e)}createHiddenInput(e){const t=document.createElement("input");return t.type="hidden",t.name=e,this.el.appendChild(t),t}},n=class{constructor(e,t={}){Object.defineProperty(this,"el",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"identityInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"passwordInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"fallback",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"submitting",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"submitter",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"disabledInputs",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.options=Object.assign({},i,t),this.identityInput=this.el.querySelector(this.options.identitySelector),this.passwordInput=this.el.querySelector(this.options.passwordSelector),this.init()}init(){if(!this.identityInput||!this.passwordInput)throw new Error("Identity or password input not found.");this.el.addEventListener("submit",(async e=>{if(this.submitter=e.submitter,!this.submitting){e.stopPropagation(),e.preventDefault(),e.stopImmediatePropagation();try{await this.auth()}catch(e){console.warn(e)}return this.fallback||this.disablePasswords(),this.submitting=!0,void this.el.requestSubmit()}})),this.el.addEventListener("invalid",(()=>{this.release()}),!0)}release(){this.submitter&&(this.submitter.disabled=!1),this.submitting=!1,this.fallback=!1,this.getHiddenInput("srp[M2]").value="";for(const e of this.disabledInputs)e.disabled=!1}async auth(){if(!this.identityInput?.value||!this.passwordInput?.value)return;this.submitter&&(this.submitter.disabled=!0);const e=this.identityInput.value,t=this.passwordInput.value,i=this.createClient(),r=(await s.get("@auth_ajax/srpChallenge{?identity}",{vars:{identity:e}})).data.data;if(null==r)return;if(this.fallback=!!r.fallback,this.getHiddenInput("srp[fallback]").value=this.fallback?"1":"0",this.fallback)return;let{salt:n,B:o}=r;n=a(n),o=a(o);const u=await i.generateRandomSecret(),l=await i.generatePublic(u),d=await i.generatePasswordHash(n,e,t),p=await i.generateCommonSecret(l,o),h=await i.generatePreMasterSecret(u,o,d,p),b=await i.hash(h),c=await i.generateClientSessionProof(e,n,l,o,b),g=await s.post("@auth_ajax/srpAuthenticate",{identity:e,A:l.toString(16),M1:c.toString(16)}),{proof:f}=g.data.data,v=await i.generateServerSessionProof(l,c,b);v===a(f)&&(this.getHiddenInput("srp[M2]").value=v.toString(16))}getPasswordInputs(){return[this.passwordInput,...this.el.querySelectorAll("[data-srp-override]")]}disablePasswords(){this.disabledInputs=[];for(const e of this.getPasswordInputs())e&&e.value&&!e.disabled&&(e.disabled=!0,this.disabledInputs.push(e),setTimeout((()=>{e.disabled=!1}),1e3))}createClient(){const e=SRPClient.create(this.options.prime,this.options.generator,this.options.key);return e.setSize(this.options.size),e.setHasher(this.options.hasher),e}getHiddenInput(e){return this.el.querySelector(`[name="${e}"]`)||this.createHiddenInput(e)}createHiddenInput(e){const t=document.createElement("input");return t.type="hidden",t.name=e,this.el.appendChild(t),t}},u.directive("srp-registration",{mounted(e,{value:t}){const i=JSON.parse(t);u.module(e,"srp.registration",(e=>new r(e,i)))}}),u.directive("srp-login",{mounted(e,{value:t}){const i=JSON.parse(t);u.module(e,"srp.registration",(e=>new n(e,i)))}})}}}));