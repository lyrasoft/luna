{"version":3,"sources":["captcha.ts"],"names":[],"mappings":"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","file":"captcha.js","sourcesContent":["\nclass GragwarCaptcha {\n  public $image: HTMLImageElement;\n  public $input: HTMLInputElement;\n  public $refreshButton: HTMLButtonElement;\n  public $buttonIcon: HTMLSpanElement;\n\n  constructor(public $element: Element, public options: any = {}) {\n    this.$image = this.$element.querySelector('[data-captcha-image]')!;\n    this.$input = this.$element.querySelector('[data-captcha-input]')!;\n    this.$refreshButton = this.$element.querySelector('[data-captcha-refresh]')!;\n    this.$buttonIcon = this.$element.querySelector('[data-refresh-icon]')!;\n\n    this.$refreshButton.addEventListener('click', () => {\n      this.refresh();\n    });\n  }\n\n  refresh() {\n    this.$buttonIcon.classList.add('fa-spin');\n\n    let src = this.$image.dataset.image || '';\n    const t = (new Date).getTime().toString() + '.' + (Math.random() * 10000);\n\n    if (src.indexOf('?') !== -1) {\n      src += '&t=' + t;\n    } else {\n      src += '?t=' + t;\n    }\n\n    this.$image.addEventListener('load', () => {\n      this.$buttonIcon.classList.remove('fa-spin');\n      this.$input.value= '';\n    }, { once: true });\n\n    this.$image.src = src;\n  }\n\n  clear() {\n    this.$input.value = '';\n  }\n}\n\nu.directive('captcha-gregwar', {\n  mounted(el) {\n    u.module(el, 'captcha.grwgwar', (el) => new GragwarCaptcha(el));\n  }\n});\n\nclass RecaptchaCaptcha {\n  public key: string | undefined;\n  public callbackName: string | undefined;\n  public jsVerify: string | undefined;\n\n  constructor(public el: HTMLElement, public type: string) {\n    u.import('https://www.google.com/recaptcha/api.js');\n\n    this.key = this.el.dataset.key || '';\n    this.callbackName = this.el.dataset.callback || '';\n\n    this.jsVerify = this.el.dataset.jsVerify || '';\n\n    if (this.jsVerify) {\n      const form = this.el.closest('form');\n\n      if (!form) {\n        return;\n      }\n\n      if (type === 'invisible') {\n        form.addEventListener('submit', (e) => {\n          if (form.dataset.passCaptcha) {\n            return;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n\n          grecaptcha.execute();\n        });\n\n        // @ts-ignore\n        window[this.callbackName] = function(response: any) {\n          form.dataset.passCaptcha = 'true';\n          form.requestSubmit();\n        }\n      } else {\n        form.addEventListener('submit', (e) => {\n          if (form.dataset.passCaptcha) {\n            return;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n\n          alert(u.__('luna.field.captcha.message.please.check.first'));\n        });\n\n        // @ts-ignore\n        window[this.callbackName] = function(response: any) {\n          form.dataset.passCaptcha = 'true';\n        }\n      }\n    }\n  }\n}\n\nu.directive('captcha-recaptcha', {\n  mounted(el, { value }) {\n    u.module(\n      el,\n      'captcha.recaptcha',\n      (el) => new RecaptchaCaptcha(el as HTMLElement, value)\n    );\n  }\n});\n"]}